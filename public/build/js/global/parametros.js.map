{"version":3,"names":[],"mappings":"","sources":["global/parametros.js"],"sourcesContent":["export const url = 'http://192.168.18.90:3000'\nexport let clienteActualizado = false;\n\nexport async function consultarAPI(rutaComplemento) {\n    const urlFetch = url + rutaComplemento\n\n    try {\n        // Esperar la respuesta del fetch\n        const response = await fetch(urlFetch);\n        \n        // Comprobar si la respuesta es correcta\n        if (!response.ok) {\n            throw new Error('Error en la solicitud: ' + response.status);\n        }\n\n        // Esperar la conversión de la respuesta a JSON\n        const data = await response.json();\n\n        return data;\n\n    } catch (error) {\n        console.error('Error:', error);\n        return 0;\n    }\n}\n\nexport function mostrarErrorCampo(input_text, msg = ''){\n\n    const cajaTexto = document.querySelector(`#${input_text}`);\n    const label = cajaTexto.previousElementSibling;\n    const msgError = cajaTexto.nextElementSibling;\n\n    if (!cajaTexto.className.includes('input__error')){\n        cajaTexto.classList.add('input__error');\n    }\n\n    if (label){\n        if (!label.className.includes('text__error')){\n            label.classList.add('text__error');\n        }\n\n    }\n\n    if (msgError.className.includes('ocultar') && msg != ''){\n        msgError.classList.remove('ocultar');\n        msgError.textContent = msg;\n    }\n}\n\n//Se pasa por parámetro el nombre de la clase input__error \n//para obtener todos los campos a los que se necesita quitar el error \n\nexport function quitarErrorCampo(objeto){\n    \n    if (objeto.inputDOM.className.includes('input__error')){\n        objeto.inputDOM.classList.remove('input__error');\n\n        const label = objeto.inputDOM.previousElementSibling\n        label.classList.remove('text__error');\n\n        const msgError = objeto.inputDOM.nextElementSibling;\n        msgError.classList.add('ocultar');\n        msgError.textContent = '';\n    }\n}\n\nexport function limpiarFormulario(arrayCampos){\n    arrayCampos.forEach(nombreCampo => {\n        const campo = document.querySelector(`#${nombreCampo}`);\n        campo.value='';\n    });\n}\n\nexport function mostrarModal(idModal){\n    const ventanaModal =  document.querySelector(`#${idModal}`);\n    if (ventanaModal.className.includes('ocultar')){\n         ventanaModal.classList.remove('ocultar');\n    }\n}\n\n// Se ejecuta al presionar en el botón de la X \nexport function cierreManualModal(e){\n    const ventana = e.target.parentElement;\n    if(!ventana.className.includes('ocultar')){\n        ventana.classList.add('ocultar');\n    }\n}\n\n// Se ejecuta cuando termina una acción en específico y se debe cerrar automáticamente\nexport function cierreAutModal(idModal){\n    const clienteSectModal = document.querySelector(`#${idModal}`);\n    clienteSectModal.classList.add('ocultar');\n}\n\nexport function habilitarBotonSubmit(idFormulario){\n    const btnSubmit = document.querySelector(`#${idFormulario}`).querySelector('input[type=\"submit\"]');\n    btnSubmit.classList.remove('boton--secundario');\n    btnSubmit.classList.add('boton--primario');\n    btnSubmit.removeAttribute('disabled');\n\n}\n\nexport function cargarFechaHoraActual(){\n\n    // Crear un objeto de fecha con la fecha actual\n    const now = new Date();\n\n    // Formatear la fecha en el formato YYYY-MM-DD requerido por el input date\n    const formattedDate = now.toISOString().split('T')[0];\n\n    // Formatear la hora en el formato HH:MM requerido por el input time\n    const hours = now.getHours().toString().padStart(2, '0');\n    const minutes = now.getMinutes().toString().padStart(2, '0');\n\n    return {\n        fecha : formattedDate,\n        hora : `${hours}:${minutes}`\n    }\n\n}"],"file":"parametros.js"}