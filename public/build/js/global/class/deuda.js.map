{"version":3,"names":[],"mappings":"","sources":["global/class/deuda.js"],"sourcesContent":["import { limpiarFormulario } from \"../parametros.js\";\nimport { ModeloBase } from \"./ModeloBase.js\";\n\nexport class Deuda extends ModeloBase{\n    constructor(objeto){\n        super(objeto);\n    }\n\n    formularioAgregar(idFormulario){\n        const formulario = document.querySelector(`#${idFormulario}`);\n        \n        formulario.addEventListener('submit', async (e) => {\n            // Prevenir el comportamiento por defecto del formulario\n            e.preventDefault();\n\n            const campoCliente = document.querySelector('#fk_cliente_deudor');\n            const msgError = campoCliente.nextElementSibling;\n\n            if (campoCliente.value != ''){\n\n                msgError.classList.add('ocultar');\n                msgError.textContent = \"\";\n\n                // Si pasa la validación de los campos envie la petición al post\n                if(this.revisarCampos()){\n        \n                    const rta = await this.agregarRegistro(formulario);\n                    \n                    // Si se agregó el registro correctamente debe refrescar la tabla\n                    if (rta){\n                        \n                        //Obtenemos un arreglo de nombres de los campos a partir del array de objetos validacionCampos[];\n                        const nombreCamposFormulario = this.validacionCampos.map(obj => Object.keys(obj)[0]);\n    \n                        limpiarFormulario(nombreCamposFormulario);\n                        this.listarRegistros();\n    \n                    }\n                }\n            \n            }else{\n    \n                msgError.classList.remove('ocultar');\n                msgError.textContent = \"Debe seleccionar un cliente\";\n            }\n    \n        });\n    }\n}"],"file":"deuda.js"}