{"version":3,"names":[],"mappings":"","sources":["global/class/ModeloBase.js"],"sourcesContent":["import { cierreAutModal, consultarAPI, habilitarBotonSubmit, mostrarErrorCampo, quitarErrorCampo, url } from \"../parametros.js\";\n\nexport class ModeloBase{\n    constructor (objeto){\n        this.objeto = objeto;\n        //URL API\n        this.urlApiListar = objeto.urlApiListar;\n        this.urlAgregar = objeto.urlAgregar;\n        this.urlActualizar = objeto.urlActualizar;\n        this.urlEliminar = objeto.urlEliminar;\n        //Estructura en la que creará la tabla de los registros\n        this.tabla = objeto.estructuraTabla;\n        //Requisitos de cada campo para ser llenado\n        this.validacionCampos = objeto.validacionCampos;\n        //Variable global para guardar todos los registros del JSON\n        this.registros = '';\n        //Esta variable confirma si se está realizando la petición desde una ventana modal y se usa unicamente para mostrar los errores del backend y del frontend en el método handleResponse()\n        this.modal = objeto.modal;\n        //Abre la ventana modal con el registro cargado en el formulario para actualizar el registro, este está referenciado en la tabla \n        this.idVentanaModal = objeto.idVentanaModal;\n        // Se utiliza para trasladar el registro de una tabla de una ventana modal al formulario principal\n        this.equivalenciaTablaAForm = objeto.equivalenciaTablaAForm;\n\n    }\n\n    asignarValidacionCampos(){\n        this.validacionCampos.forEach( objeto => {\n\n            let nombreCampo = Object.keys(objeto)[0];\n            const regla = objeto[nombreCampo];\n            const campo = document.querySelector(`#${nombreCampo}`);\n\n            //Se construye un objeto para pasarlo por parámetro en el método estadoCampo y la function quitarErrorCampo\n            const objetoParametro = {    \n                nombreCampo : nombreCampo,\n                inputDOM : campo,\n                regla : regla,\n                value : ''\n            }\n\n            if (campo.tagName === 'INPUT'){\n\n                campo.addEventListener('input', e => {\n                    //Completamos el valor de la propiedad value del objetoParametro\n                    objetoParametro.value = e.target.value;\n                    this.estadoCampo(objetoParametro);\n                    if (this.registros != ''){\n                        this.buscarRegistros(e.target.value);\n                    }\n                });\n\n            }else if (campo.tagName === 'SELECT'){\n\n                campo.addEventListener('change', e => {\n                    //Completamos el valor de la propiedad value del objetoParametro\n                    objetoParametro.value = e.target.value;\n                    this.estadoCampo(objetoParametro);  \n\n                    if (this.registros != ''){\n                        const option = campo.querySelector(`option[value=\"${e.target.value}\"]`);\n                        this.buscarRegistros(option.textContent);\n                    }\n                });\n            }\n        });\n    }  \n    \n    estadoCampo(objetoCliente){\n        //Se obtiene la posición del arreglo en donde se encuentra el objeto, cuya llave coincide dentro del objeto\n        const posicion = this.validacionCampos.findIndex(obj => objetoCliente.nombreCampo in obj);\n        if (objetoCliente.value.match(objetoCliente.regla)){\n            this.validacionCampos[posicion].estado = true;\n            quitarErrorCampo(objetoCliente);\n        }else{\n            this.validacionCampos[posicion].estado = false;\n            mostrarErrorCampo(objetoCliente.nombreCampo, this.validacionCampos[posicion].message);\n        }\n    }\n\n    // Método para buscar registros en base al texto ingresado\n    buscarRegistros(filtro) {\n        // Filtrar los registros que incluyan el texto en cualquier propiedad del objeto\n        const registrosFiltrados = this.registros.filter(registro =>\n            Object.values(registro).some(valor =>\n                valor.toString().toLowerCase().includes(filtro.toLowerCase())\n            )\n        );\n\n        // Actualizar la tabla con los registros filtrados\n        this.crearTabla(registrosFiltrados);\n    }\n\n    crearTabla(registros = this.registros){\n        //Definimos cuales son los campos en los que necesitamos iterar\n        const tbody = document.querySelector('.tbody');\n        tbody.innerHTML = ''; //Limpiar la tabla antes de llenarla\n        const arrayCamposTabla = this.tabla.map(obj => Object.keys(obj)[0]); \n        const nombresCamposTabla = this.tabla.map(obj => [Object.keys(obj)[0], Object.values(obj)[0]]); \n\n        registros.forEach(registro => {\n            // Se convierte el objeto en un array de arrays, donde cada subarray corresponde a la propiedad y el valor, parecido a un objeto\n            let arrayRegistro = Object.entries(registro);\n\n            //Obtenemos el id del registro\n            const idRegistro = arrayRegistro[0][1];\n    \n            const tr = document.createElement('TR');\n \n            arrayRegistro.forEach(campo => {\n                // console.log(campo);\n                if(arrayCamposTabla.includes(campo[0])){\n    \n                    const td = document.createElement('TD');\n                    const span = document.createElement('SPAN');\n\n                    span.classList.add('tbody__td--titulo');\n    \n                    // Se agrega el nombre del dato dentro del td cuando este se encuentre en modo Mobile\n                    const keyCampo = nombresCamposTabla.find(nombreCampo => nombreCampo[0] === campo[0]);\n\n                    if (keyCampo) {\n                        span.textContent = keyCampo[1];\n                    }\n\n                    //Se verifica si la tabla está en una ventana modal para convertir el campo en un link\n                    const textoTD = this.verificarTipoRegistro(campo, idRegistro);\n                    \n                    td.appendChild(span);\n                    td.appendChild(textoTD);\n                    tr.appendChild(td);\n                }\n            });\n\n            tr.appendChild(this.crearTdModificar(idRegistro));\n            tr.appendChild(this.crearTdEliminar(idRegistro));\n            tbody.appendChild(tr);\n        });\n    }\n\n    verificarTipoRegistro(campo, idRegistro){\n\n        const texto = document.createElement('SPAN');\n        const keyCampo = campo[0];\n        const valorCampo = campo[1];\n        \n        if (this.modal.isModal){\n            // Si la tabla se encuentra dentro de un modal se crea una etiqueta <A> en lugar de un <SPAN>\n            const aLink = document.createElement('A');\n            aLink.setAttribute('href', '#');\n\n            // Encuentra el objeto donde la clave existe\n            const objetoEncontrado = this.tabla.find(obj => keyCampo in obj);\n\n            // Se verifica si el dato debe ser un hipervínculo\n            if(objetoEncontrado.class.includes('tbody__td--enlace')){\n                aLink.textContent = valorCampo;\n                aLink.dataset.id = idRegistro;\n                aLink.addEventListener('click', e => { \n                    e.preventDefault();\n                    this.asignarDatosAFormulario(e)}\n                );\n\n                // Se verifica si el campo tiene clases css para aplicar\n                if(objetoEncontrado.class.length > 0){\n                    objetoEncontrado.class.forEach(clase => {\n                        aLink.classList.add(clase);\n                    });\n                }\n                \n                return aLink;\n                \n            }else{\n\n                texto.textContent = valorCampo;\n                return texto;         \n            }\n\n        }else{\n\n            texto.textContent = valorCampo;\n            return texto;\n        }\n    }\n\n    asignarDatosAFormulario(e){\n        const idBusqueda = Object.entries(this.equivalenciaTablaAForm[0])[0][1]; // Ejemplo [id_cliente_deudor , 'id_cliente']\n\n        const objeto = this.encontrarRegistro(idBusqueda, e.target.getAttribute('data-id'));\n\n        if (objeto){\n            this.equivalenciaTablaAForm.forEach(item => {\n                const arrayCampo = Object.entries(item)[0];\n                const campo = document.querySelector(`#${arrayCampo[0]}`);\n                campo.value = objeto[arrayCampo[1]];\n            });\n    \n            cierreAutModal(this.modal.nombreModal);\n\n            habilitarBotonSubmit(this.modal.idFormularioPrincipal);\n        }\n    }\n\n    crearTdModificar(idRegistro){\n        const spanModificar = document.createElement('SPAN');\n        spanModificar.textContent=\"Editar\";\n        \n        const imgModificar = document.createElement('IMG');\n        imgModificar.setAttribute('src','/build/img/sistema/editar-ng.svg');\n        imgModificar.setAttribute('alt','Imagen Editar');\n    \n        const linkModificar = document.createElement('A');\n        linkModificar.setAttribute('href', '#');\n        linkModificar.appendChild(imgModificar);\n        linkModificar.appendChild(spanModificar);\n        linkModificar.addEventListener('click', e => this.mostrarModal(e, idRegistro));\n    \n        const tdModificar = document.createElement('TD');\n        tdModificar.classList.add('tbody__td--icon');\n        tdModificar.appendChild(linkModificar);\n        return tdModificar;\n    }\n\n    crearTdEliminar(idRegistro){\n        const spanEliminar = document.createElement('SPAN');\n        spanEliminar.textContent=\"Eliminar\";\n        spanEliminar.dataset.id = idRegistro;\n    \n        const imgEliminar = document.createElement('IMG');\n        imgEliminar.setAttribute('src','/build/img/sistema/eliminar.svg');\n        imgEliminar.setAttribute('alt','Imagen Eliminar');\n                \n        const linkEliminar = document.createElement('A');\n        linkEliminar.setAttribute('href', '#');\n        linkEliminar.appendChild(imgEliminar);\n        linkEliminar.appendChild(spanEliminar);\n        linkEliminar.addEventListener('click', () => this.confirmarEliminacion(idRegistro));\n\n        const tdEliminar = document.createElement('TD');\n        tdEliminar.classList.add('tbody__td--icon');\n        tdEliminar.appendChild(linkEliminar);\n        return tdEliminar;\n    }\n\n    mostrarModal(e, idRegistro){\n        e.preventDefault();\n        const ventanaModal = document.querySelector(`#${this.idVentanaModal}`);\n        if (ventanaModal.className.includes('ocultar')){\n            ventanaModal.classList.remove('ocultar');\n        }\n        const clienteEncontrado = this.buscarCliente(idRegistro);\n        this.asignarValoresVentanaModal(clienteEncontrado);\n    }\n\n    // Verifica que los campos requeridos sean llenados\n    revisarCampos(){\n        let arrayObjetos = [];\n        this.validacionCampos.forEach(objeto => {\n            if(objeto.estado == false){\n                arrayObjetos.push(objeto);\n            }\n        });\n\n        if (arrayObjetos.length > 0){\n            arrayObjetos.forEach(objeto => {\n                const nombreCampo = Object.keys(objeto)[0];\n                const mensajeError = objeto.message;\n                \n                mostrarErrorCampo(nombreCampo, mensajeError);\n            });\n            // Si encontró errores retorne false\n            return false;\n        }else {\n            return true;\n        }\n    }\n\n    encontrarRegistro(campo, id){\n        return (this.registros.find(registro => registro[campo] == id)) || false;\n    }\n\n    // Función únicamente para obtener los registros en memoria y realizar búsquedas\n    async obtenerRegistros(){\n        if (!this.urlApiListar) {\n            console.error(\"La URL para listar no está definida.\");\n            return;\n        }\n        try { \n            const datos = await consultarAPI(this.urlApiListar); \n            this.registros = datos;\n            return true;\n\n        } catch (error) { \n            console.error('Error API:', error); \n            return false;\n        }\n    }\n\n    //Se reutiliza el método para obtener los registros y adicionalmente crear la tabla con los mismos datos\n    async listarRegistros(){\n        try { \n            const dataOk = await this.obtenerRegistros();\n            if (dataOk){\n                this.crearTabla();\n            }\n        } catch (error) { \n            console.error('Error API:', error); \n        }\n    }\n\n    async agregarRegistro(formulario){\n\n        const urlGuardar = url + this.urlAgregar;\n\n        // Crear una instancia de FormData con el formulario\n        const formData = new FormData(formulario);\n   \n        // Hacer una solicitud fetch para enviar los datos del formulario\n        try {\n\n            const response = await fetch(urlGuardar, {\n                method: 'POST',\n                body: formData,\n                headers: { 'Accept': 'application/json' }\n            });\n\n            if (!response.ok) throw new Error('No hay conexión con el servidor');\n\n            const data = await response.json();\n            const rta = this.handleResponse(data);\n            return rta;\n\n        } catch (error) {\n            console.error('Codigo de error:', error);\n        }\n    }\n\n    async actualizarRegistro(formulario){\n        \n        const urlActualizar = url + this.urlActualizar;\n        // Hacer una solicitud fetch para enviar los datos del formulario\n        try {\n            const response = await fetch(urlActualizar, {\n                method: 'POST',\n                body: formulario,\n                headers: { 'Accept': 'application/json' }\n            });\n\n            if (!response.ok) \n                throw new Error('No hay conexión con el servidor');\n            \n            const data = await response.json();\n\n            const rta = this.handleResponse(data);\n            return rta;\n\n        } catch (error) {\n            console.error('Codigo de error:', error);\n        }\n    }\n\n    confirmarEliminacion(idRegistro){\n        \n        Swal.fire({\n            title: '¿Confirma que desea eliminar este registro?',\n            text: \"Después de eliminado no se puede recuperar\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#d33',\n            cancelButtonColor: '##3085d6',\n            confirmButtonText: 'Si, eliminar'\n\n            }).then((result) => {\n\n            if (result.isConfirmed) {\n                const rta = this.eliminarRegistro(idRegistro);\n                // Si se elimina el registro satisfactoriamente, se refresca la tabla\n                if (rta){\n                    this.listarRegistros();\n                }\n            }\n        })\n    }\n\n    async eliminarRegistro(id){\n\n        const urlEliminar = url + this.urlEliminar;\n        const formData = new FormData();\n        formData.append('id', id);\n\n        try {\n            const response = await fetch(urlEliminar, {\n                method: 'POST',\n                body: formData,\n                headers: { 'Accept': 'application/json' }\n            });\n\n            if (!response.ok) throw new Error('No hay conexión con el servidor');\n\n            const data = await response.json();\n            const rta = this.handleResponse(data);\n            return rta;\n\n        } catch (error) {\n            console.error('Codigo de error:', error);\n        }\n    }\n\n    handleResponse(data) {\n        if (data.rta == \"true\") {\n            Swal.fire({\n                title: data.message,\n                icon: 'success',\n                showConfirmButton: false,\n                timer: 1500\n            });\n            \n            return true;\n\n        } else if (data.alertas) {\n\n            const errores = data.alertas['error'];\n\n            for (let propiedad in errores) {\n\n                const msg = errores[propiedad][0];\n\n                if (errores.hasOwnProperty(propiedad)) {\n\n                    if (this.modal.isModal){\n                        mostrarErrorCampo(propiedad + this.modal.nombreCampoComplemento, msg);\n                    }else{\n                        mostrarErrorCampo(propiedad, msg);\n                    }\n                }\n            }\n\n            Swal.fire({\n                title: data.message,\n                icon: 'error',\n                confirmButtonColor: '#f00',\n                confirmButtonText: 'Aceptar'\n            });\n\n            return false;\n\n        } else {\n            console.log(data);\n\n            return false;\n\n        }\n    }\n}\n\n\n"],"file":"ModeloBase.js"}