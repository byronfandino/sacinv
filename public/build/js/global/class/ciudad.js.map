{"version":3,"names":[],"mappings":"","sources":["global/class/ciudad.js"],"sourcesContent":["import { consultarAPI } from \"../parametros.js\";\n\nexport class Ciudad {\n    constructor() {\n        this.comboCiudades;\n    }\n\n    async cargarCiudades(idCmbDepart, idCmbCiudad) {\n        const comboBoxDepart = document.querySelector(`#${idCmbDepart}`);\n        this.comboCiudades = document.querySelector(`#${idCmbCiudad}`);\n        \n        // Aseguramos que las ciudades no se carguen hasta que se dispare el evento change\n        await new Promise(resolve => {\n            \n            comboBoxDepart.addEventListener('change', async (e) => {\n                // Obtenemos los datos\n                const datos = await consultarAPI(\"/ciudad/api?cod_depart=\" + e.target.value);\n                \n                // Borramos las opciones que puedan existir\n                const options = this.comboCiudades.querySelectorAll('option');\n                options.forEach(option => {\n                    if (option.getAttribute('value') !== \"\") {\n                        option.remove();\n                    }\n                });\n    \n                // Creamos los nuevos options\n                datos.forEach(ciudad => {\n                    const optionEntidad = document.createElement('OPTION');\n                    optionEntidad.setAttribute('value', ciudad.id_ciudad);\n                    optionEntidad.textContent = ciudad.nombre_ciudad;\n                    this.comboCiudades.appendChild(optionEntidad);\n                });\n                \n                // Resolvemos la promesa despu√©s de haber actualizado las ciudades\n                resolve();\n            });\n    \n            // Desencadenar el evento change manualmente para asegurar la carga inicial\n            comboBoxDepart.dispatchEvent(new Event('change'));\n        });\n    }\n\n    cambiarValue(valor){\n        this.comboCiudades.value = valor;\n    }\n}\n"],"file":"ciudad.js"}