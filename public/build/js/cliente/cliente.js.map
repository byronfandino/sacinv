{"version":3,"names":[],"mappings":"","sources":["cliente/cliente.js"],"sourcesContent":["import { Ciudad } from \"../global/class/ciudad.js\";\nimport { Cliente } from \"../global/class/cliente.js\";\n\ndocument.addEventListener('DOMContentLoaded', ()=>{\n\n    cargarComboBoxCiudades();\n    cargarCliente();\n    \n});\n\n// Cargar ciudades en el comboBox cada vez que se cambie de departamento\nfunction cargarComboBoxCiudades(){\n    const ciudad = new Ciudad();\n    ciudad.cargarCiudades('nombre_depart', 'fk_ciudad');\n}\n\nfunction cargarCliente(){\n    //Definir el objeto Cliente para enviarlo por parámetro al constructor\n    const objetoCliente = {\n\n        modal:{\n            isModal:false\n        },\n\n        url : {\n            agregar : '/cliente/guardar',\n            eliminar : '/cliente/eliminar',\n            apiConsultar: '/cliente/api',\n        },\n        \n        idVentanaModal: 'modal_cliente_actualizar',\n\n        // Son los campos que deben ir en la tabla al momento de consultar el servidor\n        tabla : {\n            idTabla: 'tabla_cliente',\n            estructura : [\n                {cedula_nit: 'Cédula / Nit', posicion: 1, class:[]},\n                {nombre: 'Nombre del Cliente', posicion: 2, class:[]},\n                {telefono: 'Celular', posicion:3, class: []},\n                {direccion: 'Dirección', posicion:4, class: []},\n                {nombre_ciudad: 'Ciudad', posicion:5, class: []},\n                {nombre_depart: 'Departamento', posicion:6, class: []}\n            ],\n    \n            columnaModificar: true,\n            columnaEliminar: true\n        },\n\n        // Se crea esta propiedad porque es necesario pasar los datos de un registro de la tabla al formulario modal para actualizar los datos, por lo tanto es necesario saber cual es el equivalente del nombre del campo de la array de datos con el nombre del campo al cual se pasa los datos\n        equivalenciaCamposModal : [\n        //id del campo del fomulario principal : 'id del campo de la ventana modal'\n            {id_cliente: 'id_cliente_modal'},\n            {cedula_nit: 'cedula_nit_modal'},\n            {nombre: 'nombre_modal'},\n            {telefono: 'telefono_modal'},\n            {direccion: 'direccion_modal'},\n            {cod_depart: 'cod_depart_modal'},\n            {fk_ciudad: 'fk_ciudad_modal'}\n        ],\n\n        //Se verifica que los campos diligenciados cumplan con estos registros\n        validacionCampos : [\n            {cedula_nit: '^(?!.*--)[0-9]{4,15}$|^(?!.*--)[0-9-]{4,15}$', message: 'Caracteres aceptados: números (0-9) y un solo guión', estado: false},\n            {nombre: '^[0-9A-ZÑa-züñáéíóúÁÉÍÓÚÜ ]{2,100}$', message: 'Solo acepta números y/o letras', estado: false},\n            {telefono: '^[0-9]{10}$', message: 'Se permite 10 números', estado: false},\n            {direccion: '^[a-zA-Z0-9#.\\-áéíóúÁÉÍÓÚñÑ -]{5,100}$', message: 'Se permiten letras, números, espacios y símbolos como: # -', estado: false},\n            {nombre_depart: '^[0-9]{2}$', message: 'Debe seleccionar un departamento', estado: false},\n            {fk_ciudad: '^[0-9]{1,5}$', message: 'Debe seleccionar una ciudad después de seleccionar el departamento', estado: false}\n        ]\n    }\n\n    const cliente = new Cliente(objetoCliente);\n    cliente.listarRegistros();\n    cliente.asignarValidacionCampos();\n    cliente.formularioAgregar('form_cliente'); //id del formulario\n    botonResetFormulario(cliente);\n}\n\nfunction botonResetFormulario(cliente){\n    const botonReset = document.querySelector('#reset');\n    botonReset.addEventListener('click', ()=>{\n        cliente.listarRegistros();\n    })\n}"],"file":"cliente.js"}