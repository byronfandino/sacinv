{"version":3,"names":[],"mappings":"","sources":["cliente/cliente.js"],"sourcesContent":["import { Ciudad } from \"../global/class/ciudad.js\";\nimport { Cliente } from \"../global/class/cliente.js\";\nimport { limpiarFormulario } from \"../global/parametros.js\";\n\ndocument.addEventListener('DOMContentLoaded', ()=>{\n\n    // Cargar ciudades en el comboBox cada vez que se cambie de departamento\n    const ciudad = new Ciudad();\n    ciudad.cargarCiudades('nombre_depart', 'fk_ciudad');\n\n    //Definir el objeto Cliente para enviarlo por parámetro al constructor\n    const objetoCliente = {\n\n        idformularioAgregar : 'form_cliente',\n\n        urlAgregar : '/cliente/guardar',\n        urlEliminar : '/cliente/eliminar',\n        urlApiListar: '/cliente/api',\n        idVentanaModal: 'modal-cliente',\n\n        // Son los campos que deben ir en la tabla al momento de consultar el servidor\n        estructuraTabla : [\n            {cedula_nit: 'Cédula / Nit', posicion: 1, class:[]},\n            {nombre: 'Nombre del Cliente', posicion: 2, class:[]},\n            {telefono: 'Celular', posicion:3, class: []},\n            {direccion: 'Dirección', posicion:4, class: []},\n            {nombre_ciudad: 'Ciudad', posicion:5, class: []},\n            {nombre_depart: 'Departamento', posicion:6, class: []}\n        ],\n\n        // Se crea esta propiedad porque es necesario pasar los datos de un registro de la tabla al formulario modal para actualizar los datos\n        camposModalCliente : [\n        //id del campo del fomulario principal : 'id del campo de la ventana modal'\n            {id_cliente: 'id_cliente_modal'},\n            {cedula_nit: 'cedula_nit_modal'},\n            {nombre: 'nombre_modal'},\n            {telefono: 'telefono_modal'},\n            {direccion: 'direccion_modal'},\n            {cod_depart: 'cod_depart_modal'},\n            {fk_ciudad: 'fk_ciudad_modal'}\n        ],\n\n        //Se verifica que los campos diligenciados cumplan con estos registros\n        validacionCampos : [\n            {cedula_nit: '^(?!.*--)[0-9]{4,15}$|^(?!.*--)[0-9-]{4,15}$', message: 'Caracteres aceptados: números (0-9) y un solo guión', estado: false},\n            {nombre: '^[0-9A-ZÑa-züñáéíóúÁÉÍÓÚÜ ]{4,100}$', message: 'Solo acepta números y/o letras', estado: false},\n            {telefono: '^[0-9]{10}$', message: 'Se permite 10 números', estado: false},\n            {direccion: '^[a-zA-Z0-9#\\-áéíóúÁÉÍÓÚñÑ ]{5,100}$', message: 'Se permiten letras, números, espacios y símbolos como: # -', estado: false},\n            {nombre_depart: '^[0-9]{2}$', message: 'Debe seleccionar un departamento', estado: false},\n            {fk_ciudad: '^[0-9]{1,5}$', message: 'Debe seleccionar una ciudad después de seleccionar el departamento', estado: false}\n        ]\n    }\n\n    const cliente = new Cliente(objetoCliente);\n    cliente.listarRegistros();\n    formularioAgregarRegistro(cliente);\n    botonResetFormulario(cliente);\n    cliente.asignarValidacionCampos();\n    \n});\n\nfunction formularioAgregarRegistro(cliente){\n\n    const formulario = document.querySelector('#form_cliente');\n\n    formulario.addEventListener('submit', async (e) => {\n        // Prevenir el comportamiento por defecto del formulario\n        e.preventDefault();\n\n        // Si pasa la validación de los campos envie la petición al post\n        if(cliente.revisarCampos()){\n\n            const rta = await cliente.agregarRegistro(formulario);\n            \n            // Si se agregó el registro correctamente debe refrescar la tabla\n            if (rta){\n                //Obtenemos un arreglo de nombres de los campos a partir del array de objetos validacionCampos[];\n                const camposFormulario = cliente.validacionCampos.map(obj => Object.keys(obj)[0]);\n                limpiarFormulario(camposFormulario, 'cedula_nit');\n                cliente.listarRegistros();\n            }\n        }\n    });\n}\n\nfunction botonResetFormulario(cliente){\n    const botonReset = document.querySelector('#reset');\n    botonReset.addEventListener('click', ()=>{\n        cliente.listarRegistros();\n    })\n}"],"file":"cliente.js"}