{"version":3,"names":[],"mappings":"","sources":["cliente/cliente_modal.js"],"sourcesContent":["import { Ciudad } from '../global/class/ciudad.js';\nimport { Cliente } from '../global/class/cliente.js';\nimport { cierreManualModal } from '../global/parametros.js';\n\ndocument.addEventListener('DOMContentLoaded', () =>{\n    // Cargar ciudades en el comboBox cada vez que se cambie de departamento\n    const ciudad = new Ciudad();\n    //Se pasa por parámetro el id del Departamento, y el id de la ciudad \n    ciudad.cargarCiudades('cod_depart_modal', 'fk_ciudad_modal');\n\n    const objetoCliente = {\n        urlActualizar : '/cliente/actualizar',\n        // Es utilizado únicamente para mostrar los mensajes de error en los campos del formulario que contienen un nombre adicional, y que estos errores provienen del backend y del frontend \n        modal:{\n            isModal:true,\n            nombreCampoComplemento: '_modal'\n        },\n\n        validacionCampos : [\n            {cedula_nit_modal: '^(?!.*--)[0-9]{4,15}$|^(?!.*--)[0-9-]{4,15}$', message: 'Caracteres aceptados: números (0-9) y un solo guión', estado: true},\n            {nombre_modal: '^[0-9A-ZÑa-züñáéíóúÁÉÍÓÚÜ ]{4,100}$', message: 'Solo acepta números y/o letras', estado: true},\n            {telefono_modal: '^[0-9]{10}$', message: 'Se permite 10 números', estado: true},\n            {direccion_modal: '^[a-zA-Z0-9#.\\-áéíóúÁÉÍÓÚñÑ -]{5,100}$', message: 'Se permiten letras, números, espacios y símbolos como: # -', estado: true},\n            {cod_depart_modal: '^[0-9]{2}$', message: 'Debe seleccionar un departamento', estado: true},\n            {fk_ciudad_modal: '^[0-9]{1,5}$', message: 'Debe seleccionar una ciudad después de seleccionar el departamento', estado: true}\n        ]\n    }\n\n    // Se envia el id del formulario para el envio de registro\n    const cliente = new Cliente(objetoCliente);\n    cliente.asignarValidacionCampos();\n    formularioActualizarRegistro(cliente);\n\n    // Hay varias ventanas modal, y por lo tanto es necesario programar cada botón\n    const btnCerraModal = document.querySelector('.cerrar__modal');\n    btnCerraModal.addEventListener('click', e => cierreManualModal(e));\n\n});\n\nfunction formularioActualizarRegistro(cliente){\n\n    const formulario = document.querySelector('#form_cliente_modal');\n\n    formulario.addEventListener('submit', async (e) => {\n        // Prevenir el comportamiento por defecto del formulario\n        e.preventDefault();\n\n        // Si pasa la validación de los campos envie la petición al post\n        if(cliente.revisarCampos()){\n\n            let formData = new FormData(formulario); // Crear un objeto FormData con los datos del formulario\n               \n            // Crear un nuevo FormData\n            let nuevoFormData = new FormData();\n            \n            // Modificar las keys\n            for (let [key, value] of formData.entries()) {\n                if (key === 'id_cliente_modal') {\n                nuevoFormData.append('id_cliente', value);\n                } else if (key === 'cedula_nit_modal') {\n                nuevoFormData.append('cedula_nit', value);\n                } else if (key === 'nombre_modal') {\n                    nuevoFormData.append('nombre', value);\n                } else if (key === 'telefono_modal') {\n                    nuevoFormData.append('telefono', value); \n                }else if (key === 'direccion_modal') {\n                    nuevoFormData.append('direccion', value); \n                }else if (key === 'fk_ciudad_modal') {\n                    nuevoFormData.append('fk_ciudad', value);\n                }else {\n                     // Mantener las otras keys sin cambios\n                    nuevoFormData.append(key, value); \n                }\n            }\n            \n            const rta = await cliente.actualizarRegistro(nuevoFormData);\n            if(rta){\n\n                // Cerramos el modal\n                const modalCliente = document.querySelector('#modal-cliente');\n                if (!modalCliente.className.includes('ocultar')){\n                    modalCliente.classList.add('ocultar');\n                }\n\n                // Refrescar la página\n                setTimeout(()=>{\n                    location.reload();\n                },800);\n            }\n        }\n    });\n}"],"file":"cliente_modal.js"}