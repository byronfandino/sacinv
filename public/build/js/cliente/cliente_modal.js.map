{"version":3,"names":[],"mappings":"","sources":["cliente/cliente_modal.js"],"sourcesContent":["import { Ciudad } from '../global/class/ciudad.js';\nimport { Cliente } from '../global/class/cliente.js';\nimport { cierreManualModal } from '../global/parametros.js';\n\ndocument.addEventListener('DOMContentLoaded', () =>{\n\n    cargarComboBoxCiudades();\n    cargarCliente();\n    botonesCerrarModal();\n\n});\n\nfunction cargarComboBoxCiudades(){\n    // Cargar ciudades en el comboBox cada vez que se cambie de departamento\n    const ciudad = new Ciudad();\n    //                     (id del Departamento, id de la ciudad) \n    ciudad.cargarCiudades('cod_depart_modal', 'fk_ciudad_modal');\n}\n\nfunction cargarCliente(){\n    const objetoCliente = {\n\n        url : {\n            actualizar : '/cliente/actualizar',\n        },\n\n        // Es utilizado únicamente para mostrar los mensajes de error en los campos del formulario que contienen un nombre adicional, y que estos errores provienen del backend y del frontend \n        modal:{\n            isModal:true,\n            idVentanaModal : 'modal_cliente_actualizar',\n            nombreCampoComplemento: '_modal'\n        },\n\n        validacionCampos : [\n            {cedula_nit_modal: '^(?!.*--)[0-9]{4,15}$|^(?!.*--)[0-9-]{4,15}$', message: 'Caracteres aceptados: números (0-9) y un solo guión', estado: true},\n            {nombre_modal: '^[0-9A-ZÑa-züñáéíóúÁÉÍÓÚÜ ]{2,100}$', message: 'Solo acepta números y/o letras', estado: true},\n            {telefono_modal: '^[0-9]{10}$', message: 'Se permite 10 números', estado: true},\n            {direccion_modal: '^[a-zA-Z0-9#.\\-áéíóúÁÉÍÓÚñÑ -]{5,100}$', message: 'Se permiten letras, números, espacios y símbolos como: # -', estado: true},\n            {cod_depart_modal: '^[0-9]{2}$', message: 'Debe seleccionar un departamento', estado: true},\n            {fk_ciudad_modal: '^[0-9]{1,5}$', message: 'Debe seleccionar una ciudad después de seleccionar el departamento', estado: true}\n        ],\n        //Filtra los resultados en la tabla de acuerdo a los valores que digite el usuario en los campos\n        filtroBusqueda: false\n    }\n\n    // Se envia el id del formulario para el envio de registro\n    const cliente = new Cliente(objetoCliente);\n    cliente.asignarValidacionCampos();\n    cliente.formularioActualizar('form_cliente_actualizar');\n}\n\nfunction botonesCerrarModal(){\n    // Hay varias ventanas modal, y por lo tanto es necesario programar cada botón\n    const btnCerraModal = document.querySelector('.cerrar__modal');\n    btnCerraModal.addEventListener('click', e => cierreManualModal(e));\n}"],"file":"cliente_modal.js"}