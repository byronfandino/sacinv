{"version":3,"names":[],"mappings":"","sources":["cxc/cxc.js"],"sourcesContent":["import { Deuda } from \"../global/class/deuda.js\";\nimport { cierreManualModal, mostrarErrorCampo, mostrarModal } from \"../global/parametros.js\";\n\ndocument.addEventListener('DOMContentLoaded', () => { \n    \n    cargarFechaHoraActual();\n    cargarBotones();\n    cargarDeudor();\n\n});\n\nfunction cargarBotones(){\n    // Muestra la ventana modal de la tabla de registros \n    //Botón buscar\n    const btnBuscarCliente = document.querySelector('#buscar_cliente');\n    btnBuscarCliente.addEventListener('click', e => {\n        e.preventDefault();\n        mostrarModal('modal_cliente_select');\n    });\n    \n    // Hay varias ventanas modal, y por lo tanto es necesario programar cada botón\n    //Botón cerrar ventana Modal\n    const btnCerraModal = document.querySelectorAll('.cerrar__modal');\n    btnCerraModal.forEach( boton => {\n        boton.addEventListener('click', e => {\n            e.preventDefault();\n            cierreManualModal(e);\n        });\n    });\n}\n\nfunction cargarFechaHoraActual(){\n     // Obtener los elementos de fecha y hora\n     const dateField = document.getElementById('fecha');\n     const timeField = document.getElementById('hora');\n \n     // Crear un objeto de fecha con la fecha actual\n     const now = new Date();\n \n     // Formatear la fecha en el formato YYYY-MM-DD requerido por el input date\n     const formattedDate = now.toISOString().split('T')[0];\n     dateField.value = formattedDate;\n \n     // Formatear la hora en el formato HH:MM requerido por el input time\n     const hours = now.getHours().toString().padStart(2, '0');\n     const minutes = now.getMinutes().toString().padStart(2, '0');\n     timeField.value = `${hours}:${minutes}`;\n}\n\nfunction cargarDeudor(){\n    const objetoDeudor = {\n        idFormularioAgregar : 'form_deudores',\n        \n        modal:{\n            isModal:false\n        },\n\n        url : {\n            agregar : '/deuda/guardar',\n            eliminar: '/deuda/eliminar',\n            apiConsultar: '/deuda/api',\n        },\n\n        idVentanaModal: 'modal-deudor',\n\n        tabla : {\n            idTabla: 'tabla_deuda',\n            estructura : [\n                // nombre_campo_bd: Titulo campo modo Mobile, orden, arreglo de clases css\n                {fecha: 'Fecha', posicion: 1, class:[]},\n                {hora: 'Hora', posicion: 2, class:[]},\n                {tipo_mov: 'Tipo Movimiento', posicion:3, class: []},\n                {descripcion: 'Descripcion', posicion:4, class: []},\n                {valor: 'Valor', posicion:5, class: []},\n                {Saldo: 'Saldo', posicion:6, class: []}\n            ],\n    \n            columnaModificar: false,\n            columnaEliminar: false\n        },\n\n        validacionCampos : [\n            //id del campo : 'expresión regular', mensaje de error: 'XXXXX', estado(Cumple con la expresion regular : true | false)\n            {fecha: '^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$', message: 'Debe seleccionar una fecha', estado: true},\n            {hora: '^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$', message: 'Debe seleccionar una hora', estado: true},\n            {descripcion: '^[a-zA-Z0-9#.\\-áéíóúÁÉÍÓÚñÑ -]{3,500}$', message: 'Está digitando caracteres inválidos', estado: false},\n            {tipo_mov: '^[AD]{1}$', message: 'Debe seleccionar un tipo de movimiento', estado: false},\n            {valor: '^[0-9]{2,10}$', message: 'Debe digitar un valor numérico', estado: false}\n        ]\n    }\n\n    const deudor = new Deuda(objetoDeudor);\n    deudor.asignarValidacionCampos();\n    deudor.formularioAgregar('form_deuda');\n}\n\n"],"file":"cxc.js"}